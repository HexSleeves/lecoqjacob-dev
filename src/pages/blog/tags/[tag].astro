---
import { getCollection } from "astro:content";
import BaseLayout from "../../../layouts/BaseLayout.astro";

export async function getStaticPaths() {
  const posts = await getCollection("posts");
  const filteredPosts = posts.filter((post) => {
    if (import.meta.env.DEV) {
      return true;
    }
    return !post.data.draft;
  });

  const allTags = new Set<string>();
  filteredPosts.forEach((post) => {
    if (post.data.tags) {
      post.data.tags.forEach((tag) => allTags.add(tag));
    }
  });

  return Array.from(allTags).map((tag) => ({
    params: { tag },
    props: {
      tag,
      posts: filteredPosts.filter(
        (post) => post.data.tags && post.data.tags.includes(tag)
      ),
    },
  }));
}

const { tag, posts } = Astro.props;
const title = `Posts tagged "${tag}"`;
const description = `All blog posts tagged with "${tag}"`;
const permalink = Astro.site
  ? new URL(`/blog/tags/${tag}`, Astro.site).href
  : `/blog/tags/${tag}`;

const sortedPosts = posts.sort(
  (a, b) =>
    new Date(b.data.publishDate).valueOf() -
    new Date(a.data.publishDate).valueOf()
);
---

<BaseLayout
  title={title}
  description={description}
  permalink={permalink}
  current="blog"
>
  <div class="container">
    <h1>Posts tagged "{tag}"</h1>
    <p>
      Found {posts.length} post{posts.length !== 1 ? "s" : ""} with this tag.
    </p>
    <a href="/blog" class="back-link">← Back to all posts</a>

    {
      sortedPosts.map((post, index) => {
        const href = `/blog/${post.data.slug}`;
        return (
          <div>
            {index !== 0 && <hr />}
            <div class="post-item">
              <h2>
                <a href={href}>{post.data.title}</a>
              </h2>
              <p>{post.data.description}</p>
              {post.data.categories && (
                <div class="post-categories">
                  <span class="category-label">Categories:</span>
                  {post.data.categories.map((category) => (
                    <span class="category-tag">{category}</span>
                  ))}
                </div>
              )}
              {post.data.tags && (
                <div class="post-tags">
                  {post.data.tags.map((postTag) => (
                    <a
                      href={`/blog/tags/${postTag}`}
                      class={`tag ${postTag === tag ? "current-tag" : ""}`}
                    >
                      {postTag}
                    </a>
                  ))}
                </div>
              )}
              <div class="post-item-footer">
                <span class="post-item-date">— {post.data.publishDate}</span>
              </div>
            </div>
          </div>
        );
      })
    }
  </div>
</BaseLayout>

<style>
  h1 {
    margin-bottom: 0.5rem;
  }

  h2,
  .post-item-footer {
    font-family: var(--font-family-sans);
    font-weight: 700;
  }

  .post-item-date {
    color: var(--text-secondary);
    text-align: left;
    text-transform: uppercase;
    margin-right: 16px;
  }

  .back-link {
    color: var(--primary-color);
    text-decoration: none;
    font-family: var(--font-family-sans);
    font-weight: 600;
    margin-bottom: 2rem;
    display: inline-block;
  }

  .back-link:hover {
    text-decoration: underline;
  }

  hr {
    margin: 60px auto;
  }

  .post-categories {
    margin: 0.5rem 0;
    display: flex;
    flex-wrap: wrap;
    align-items: center;
    gap: 0.5rem;
  }

  .category-label {
    font-family: var(--font-family-sans);
    font-weight: 600;
    font-size: 0.9rem;
    color: var(--text-secondary);
  }

  .category-tag {
    background-color: var(--text-secondary);
    color: var(--background-color);
    padding: 0.2rem 0.5rem;
    border-radius: 4px;
    font-size: 0.75rem;
    font-family: var(--font-family-sans);
    font-weight: 500;
  }

  .post-tags {
    margin: 0.5rem 0;
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
  }

  .tag {
    background-color: var(--primary-color);
    color: white;
    padding: 0.2rem 0.5rem;
    border-radius: 4px;
    font-size: 0.8rem;
    font-family: var(--font-family-sans);
    font-weight: 500;
    text-decoration: none;
    transition: opacity 0.2s ease;
  }

  .tag:hover {
    opacity: 0.8;
  }

  .current-tag {
    background-color: var(--text-secondary);
    color: var(--background-color);
  }
</style>
